# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main
- development
- feature/*

variables:
  vmImageName: 'ubuntu-latest'

  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

  isDev: $[eq(variables['Build.SourceBranch'], 'refs/heads/development')]

stages:
- stage: Build

  jobs:
  - job: Build

    pool:
      vmImage: $(vmImageName)

    variables:
      buildConfiguration: 'Release'

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)' 

    - task: DotNetCoreCLI@2
      displayName: Test    
      inputs:
        command: test
        projects: '$(System.DefaultWorkingDirectory)/UnitTests/SampleTestProject/SampleTestProject.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/development'))
      displayName: Prepare Publish    
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True

    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/development'))
      displayName: Publish    
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'drop'


- stage: Deploy
  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/development'))

  jobs:
  - deployment: deploy
    condition: and(succeeded(), eq(variables.isMain, true))
    variables:
      - ${{ if eq(variables.isMain, true) }}:
        - group: CSharp-Dev
        - group: deployment-envs
        - name: deployment-env
          value: $[variables.production]
      - ${{ if eq(variables.isDev, true) }}:
        - group: CSharp-Dev
        - group: deployment-envs
        - name: deployment-env
          value: $[variables.development]
    environment: myproduction

    pool:
      vmImage: $(vmImageName)

    strategy:
        runOnce:
          deploy:
            steps:
            - script:
                echo $(AppName)
                echo $(deployment-env)
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                artifactName: 'drop'
                targetPath: '$(Pipeline.Workspace)'
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'devops-accelerator-connection'
                appType: 'webAppLinux'
                WebAppName: 'devopsacceleratorsamplecsharp'
                packageForLinux: '$(Pipeline.Workspace)/drop/src.zip'